#!/bin/bash

# Ïò§Î•ò Î∞úÏÉù ÏãúÏóê Ïä§ÌÅ¨Î¶ΩÌä∏ Ï¢ÖÎ£å Î∞è ÎØ∏Ï†ïÏùò Î≥ÄÏàò ÏÇ¨Ïö© Î∞©ÏßÄ
set -e
set -u

# Î≥ÄÏàò Ï†ïÏùò
# OWNER: GitHub Ï†ÄÏû•ÏÜå ÏÜåÏú†Ïûê Ïù¥Î¶Ñ
# REPO: GitHub Ï†ÄÏû•ÏÜå Ïù¥Î¶Ñ
# KEYWORD: Îã§Ïö¥Î°úÎìúÌï† Î¶¥Î¶¨Ïä§ ÏûêÏÇ∞ ÌïÑÌÑ∞ÎßÅ ÌÇ§ÏõåÎìú
# DEFAULT_EXTRACT_BASE: Í∏∞Î≥∏ ÏÑ§Ïπò ÎîîÎ†âÌÜ†Î¶¨ Í≤ΩÎ°ú
OWNER="pyhub-kr"
REPO="pyhub-mcptools"
DEFAULT_EXTRACT_BASE="$HOME/mcptools"

FORCE_OVERWRITE=0
INSTALL_NAME=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -f|--force)
      FORCE_OVERWRITE=1
      shift
      ;;
    --install-name)
      INSTALL_NAME="$2"
      shift 2
      ;;
    *)
      shift
      ;;
  esac
done

# ÌîÑÎ°úÍ∑∏Î†àÏä§Î∞î ÌëúÏãú Ìï®Ïàò
show_progress() {
  local width=50
  local percent=$1
  local completed=$((width * percent / 100))
  local remaining=$((width - completed))
  
  printf "\r[%s%s] %d%%" "$(printf '#%.0s' $(seq 1 $completed))" "$(printf ' %.0s' $(seq 1 $remaining))" "$percent"
}

# OS Î∞è CPU ÏïÑÌÇ§ÌÖçÏ≤ò Í≤ÄÏÇ¨ Ìï®Ïàò
check_os() {
  if [[ "$(uname)" != "Darwin" ]]; then
    echo "Unsupported OS. This script only supports macOS."
    exit 1
  fi
  echo "‚úÖ OS check passed: macOS detected"

  # CPU ÏïÑÌÇ§ÌÖçÏ≤ò ÌôïÏù∏
  CPU_ARCH=$(uname -m)
  case "$CPU_ARCH" in
    "x86_64")
      echo "‚úÖ CPU Architecture: Intel (x86_64)"
      KEYWORD="macOS-x86_64"
      ;;
    "arm64")
      echo "‚úÖ CPU Architecture: Apple Silicon (ARM64)"
      KEYWORD="macOS-arm64"
      ;;
    *)
      echo "‚ùå Unsupported CPU architecture: $CPU_ARCH"
      exit 1
      ;;
  esac
}

# ÏÑ§Ïπò Í≤ΩÎ°ú ÏÑ§Ï†ï Ìï®Ïàò
setup_path() {
  if [ -n "$INSTALL_NAME" ]; then
    case "$(uname)" in
      "Darwin")
        EXTRACT_PATH="$HOME/Library/Application Support/$INSTALL_NAME"
        ;;
      "Linux")
        EXTRACT_PATH="$HOME/.local/share/$INSTALL_NAME"
        ;;
      "MINGW"*|"MSYS"*|"CYGWIN"*|"Windows_NT")
        if [ -n "$APPDATA" ]; then
          EXTRACT_PATH="$APPDATA/$INSTALL_NAME"
        else
          EXTRACT_PATH="$HOME/.config/$INSTALL_NAME"
        fi
        ;;
      *)
        echo "‚ùå Unsupported OS for install-name option."
        exit 1
        ;;
    esac
    echo "Install name provided. Using path: $EXTRACT_PATH"
  else
    echo "Default extraction path is: $DEFAULT_EXTRACT_BASE"
    # ÌååÏù¥ÌîÑ Ïã§Ìñâ ÌôòÍ≤ΩÏùÑ Í∞êÏßÄÌïòÏó¨, ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
    if [ -t 0 ]; then
      read -p "Use this path? (Press Enter to accept or type a new path): " EXTRACT_BASE
    else
      EXTRACT_BASE=""
    fi
    if [ -z "$EXTRACT_BASE" ]; then
      EXTRACT_BASE="$DEFAULT_EXTRACT_BASE"
    fi
    EXTRACT_PATH="$EXTRACT_BASE/pyhub.mcptools"
  fi

  # Í∏∞Ï°¥ Ìè¥ÎçîÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ≠Ï†ú Ïó¨Î∂Ä ÌôïÏù∏ ÎòêÎäî Í∞ïÏ†ú ÏÇ≠Ï†ú
  if [ -d "$EXTRACT_PATH" ]; then
    if [ "$FORCE_OVERWRITE" -eq 1 ]; then
      echo "The path '$EXTRACT_PATH' already exists. Deleting (force mode)..."
      rm -rf "$EXTRACT_PATH"
    else
      if [ -t 0 ]; then
        read -p "The path '$EXTRACT_PATH' already exists. Delete and continue? (y/N): " CONFIRM
      else
        CONFIRM="n"
      fi
      if [[ "$CONFIRM" == "y" || "$CONFIRM" == "Y" ]]; then
        rm -rf "$EXTRACT_PATH"
      else
        echo "Installation aborted."
        exit 1
      fi
    fi
  fi

  echo "üìÅ Installation path set to: $EXTRACT_PATH"
  return 0
}

# Î¶¥Î¶¨Ïä§ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
get_release_info() {
  echo "üîç Fetching latest release information..."
  RELEASE_JSON=$(curl -s "https://api.github.com/repos/$OWNER/$REPO/releases/latest")
  
  # ÌÇ§ÏõåÎìúÏóê ÎßûÎäî zip ÌååÏùº ÎßÅÌÅ¨ Ï∞æÍ∏∞
  DOWNLOAD_URL=$(echo "$RELEASE_JSON" | grep "browser_download_url" | grep "pyhub.mcptools-$KEYWORD" | cut -d '"' -f 4 | grep "\.zip$" )
  SHA256_URL=$(echo "$RELEASE_JSON" | grep "browser_download_url" | grep "pyhub.mcptools-$KEYWORD" | cut -d '"' -f 4 | grep "\.sha256$" )

  if [ -z "$DOWNLOAD_URL" ]; then
    echo "‚ùå No release asset found matching the architecture: $KEYWORD"
    exit 1
  fi
  
  echo "üîó Found download URL: $DOWNLOAD_URL"
  echo "üîê Found checksum URL: $SHA256_URL"
}

# ÌååÏùº Îã§Ïö¥Î°úÎìú Ìï®Ïàò
download_file() {
  local url=$1
  local output=$2
  local size_in_bytes=0
  local percent=0

  # ÌååÏùº ÌÅ¨Í∏∞ Í∞ÄÏ†∏Ïò§Í∏∞
  size_in_bytes=$(curl -sI "$url" | grep -i content-length | awk '{print $2}' | tr -d '\r')

  # ÌÅ¨Í∏∞ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
  if [ -z "$size_in_bytes" ] || [ "$size_in_bytes" -eq 0 ]; then
    echo "‚ö†Ô∏è Could not determine file size, downloading without progress bar"
    curl -L "$url" -o "$output"
    return
  fi

  # ÌîÑÎ°úÍ∑∏Î†àÏä§Î∞îÏôÄ Ìï®Íªò Îã§Ïö¥Î°úÎìú
  echo "üì• Downloading: $url"
  curl -L "$url" -o "$output" -#
  echo ""
  echo "‚úÖ Download complete: $output"
}

# Ï≤¥ÌÅ¨ÏÑ¨ Í≤ÄÏ¶ù Ìï®Ïàò
verify_checksum() {
  local file=$1
  local checksum_file=$2
  
  echo "üîç Verifying file integrity..."
  
  # SHA256 Ìï¥ÏãúÍ∞íÎßå Ï∂îÏ∂ú
  EXPECTED_HASH=$(grep -Eo '^[a-fA-F0-9]{64}' "$checksum_file")
  if [ -z "$EXPECTED_HASH" ]; then
    echo "‚ùå Could not extract SHA256 hash from checksum file."
    exit 1
  fi

  # zip ÌååÏùºÏùò Ïã§Ï†ú Ìï¥Ïãú Í≥ÑÏÇ∞ (Linux/macOS Ìò∏Ìôò Ï≤òÎ¶¨)
  if command -v sha256sum &> /dev/null; then
    ACTUAL_HASH=$(sha256sum "$file" | awk '{print $1}')
  elif command -v shasum &> /dev/null; then
    ACTUAL_HASH=$(shasum -a 256 "$file" | awk '{print $1}')
  else
    echo "‚ùå No SHA256 tool found (sha256sum or shasum required)."
    exit 1
  fi

  # Ìï¥Ïãú ÎπÑÍµê
  if [ "$ACTUAL_HASH" != "$EXPECTED_HASH" ]; then
    echo "‚ùå Checksum verification failed!"
    echo "Expected: $EXPECTED_HASH"
    echo "Actual  : $ACTUAL_HASH"
    rm -f "$file"
    exit 1
  else
    echo "‚úÖ Checksum verified successfully."
  fi
}

# ÏïïÏ∂ï Ìï¥Ï†ú Î∞è ÏÑ§Ïπò Ìï®Ïàò
extract_and_install() {
  local file=$1
  local tmp_dir=$2
  local extract_path=$3
  
  echo "üì¶ Extracting files..."
  # ÏûÑÏãú ÎîîÎ†âÌÜ†Î¶¨Ïóê ÏïïÏ∂ï Ìï¥Ï†ú
  unzip -q "$file" -d "$tmp_dir"
  show_progress 50
  
  # ÏµúÏ¢Ö Î™©Ï†ÅÏßÄ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
  mkdir -p "$extract_path"
  
  # ÏïïÏ∂ï Ìï¥Ï†úÎêú ÎÇ¥Ïö© Ï§ë Ï≤´ Î≤àÏß∏ ÎîîÎ†âÌÜ†Î¶¨ Ï∞æÍ∏∞ (ÏïïÏ∂ï ÌååÏùºÏù¥ ÌïòÎÇòÏùò Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨Î•º Ìè¨Ìï®ÌïúÎã§Í≥† Í∞ÄÏ†ï)
  first_dir=$(find "$tmp_dir" -mindepth 1 -maxdepth 1 -type d | head -n 1)
  
  if [ -n "$first_dir" ]; then
    # Ï≤´ Î≤àÏß∏ ÎîîÎ†âÌÜ†Î¶¨ ÎÇ¥Ïùò ÎÇ¥Ïö©Î¨ºÎßå Ïù¥Îèô
    mv "$first_dir"/* "$extract_path"
  else
    # ÏïïÏ∂ï Ìï¥Ï†úÎêú Î™®Îì† ÌååÏùºÏùÑ ÏßÅÏ†ë Ïù¥Îèô
    mv "$tmp_dir"/* "$extract_path"
  fi
  
  show_progress 100
  echo ""
  
  # Ï†ïÎ¶¨
  rm -rf "$tmp_dir"
  echo "‚úÖ Installation complete at: $extract_path"
}

# PATH ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï Ìï®Ïàò
setup_path_env() {
  local extract_path=$1
  
  cd "$extract_path"
  echo ""
  echo "Changed directory to: $extract_path"

  # Check if path is already in PATH
  if [[ ":$PATH:" != *":$extract_path:"* ]]; then
    SHELL_PROFILE=""
    case "$SHELL" in
      */zsh)
        SHELL_PROFILE="$HOME/.zshrc"
        ;;
      */bash)
        if [ -f "$HOME/.bash_profile" ]; then
          SHELL_PROFILE="$HOME/.bash_profile"
        else
          SHELL_PROFILE="$HOME/.bashrc"
        fi
        ;;
    esac

    if [ -n "$SHELL_PROFILE" ]; then
      if ! grep -q "$extract_path" "$SHELL_PROFILE"; then
        echo "export PATH=\"\$PATH:$extract_path\"" >> "$SHELL_PROFILE"
        echo "‚úÖ Added to PATH in $SHELL_PROFILE"
      else
        echo "‚úÖ Path already present in $SHELL_PROFILE"
      fi
    else
      echo "‚ö†Ô∏è No known shell profile found. Please add the following to your PATH manually:"
      echo "export PATH=\"\$PATH:$extract_path\""
    fi
  fi
}

# ÏÑ§Ïπò ÌõÑ ÏïàÎÇ¥ Ìï®Ïàò
show_post_install_instructions() {
  local extract_path=$1
  
  echo ""
  echo "üìù To add configuration for Claude, please run the following commands:"
  echo ""
  echo "cd \"$extract_path\""
  echo "./pyhub.mcptools --version"
  echo "./pyhub.mcptools kill claude"
  echo "./pyhub.mcptools setup-add"
  echo "./pyhub.mcptools setup-print"
  echo ""
  echo "üîÑ To use pyhub.mcptools in your current terminal session, run:"
  echo "export PATH=\"\$PATH:$extract_path\""
}

# Î©îÏù∏ Ìï®Ïàò
main() {
  check_os
  setup_path
  get_release_info
  
  # Create temporary directory
  TMP_DIR=$(mktemp -d)
  
  # Download files
  FILENAME="$TMP_DIR/$(basename "$DOWNLOAD_URL")"
  CHECKSUM_FILE="$TMP_DIR/$(basename "$SHA256_URL")"
  
  download_file "$DOWNLOAD_URL" "$FILENAME"
  download_file "$SHA256_URL" "$CHECKSUM_FILE"
  
  verify_checksum "$FILENAME" "$CHECKSUM_FILE"
  extract_and_install "$FILENAME" "$TMP_DIR" "$EXTRACT_PATH"
  setup_path_env "$EXTRACT_PATH"
  show_post_install_instructions "$EXTRACT_PATH"
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
main
